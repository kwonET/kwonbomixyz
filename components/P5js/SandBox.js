"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var SandBox = function (_a) {
    var running = _a.running, result = _a.result, cellSize = _a.cellSize, colorPair = _a.colorPair;
    var srcdoc = function (src) { return "\n    <!doctype html>\n    <html>\n      <head>\n        <script src=\"https://cdn.jsdelivr.net/npm/p5@1.6.0/lib/p5.js\"></script>\n        <style>\n          body {  padding:0; margin:0; min-height: 1000px; overflow: hidden; }\n          main { display: flex; justify-content: center; align-items: center; min-height: 1000px; }\n        </style>\n      </head>\n      <body>\n        <main id=\"sketch-container\"></main>\n        <script>\n          // \uBCF4\uC548\uC744 \uC704\uD55C \uB124\uD2B8\uC6CC\uD06C \uC694\uCCAD \uCC28\uB2E8 (\uC120\uD0DD\uC801)\n          delete window.fetch;\n          delete window.XMLHttpRequest;\n          \n          // \uB85C\uADF8 \uBA54\uC2DC\uC9C0\uB97C \uBD80\uBAA8 \uCC3D\uC73C\uB85C \uC804\uB2EC\n          console.log = function(...args) {\n            window.parent.postMessage(\n              JSON.stringify({ type: 'log', data: args.map(arg => \n                typeof arg === 'object' ? JSON.stringify(arg) : String(arg)\n              )}), \n              '*'\n            );\n          };\n          \n          // \uC5D0\uB7EC \uCC98\uB9AC\n          window.addEventListener('error', function(e) {\n            window.parent.postMessage(\n              JSON.stringify({ type: 'error', data: e.message }), \n              '*'\n            );\n            return false;\n          });\n          \n          // P5.js \uCF54\uB4DC \uC2E4\uD589\n          let cellSize = ".concat(cellSize, "; \n          let columnCount = 0;\n          let rowCount = 0;\n          let currentCells = [];\n          let nextCells = [];\n          function setup() {\n            // Get container dimensions\n            const container = document.getElementById(\"sketch-container\");\n            const canvasWidth = container.offsetWidth;\n            const canvasHeight = container.offsetHeight;\n\n            // Create canvas\n            const canvas = createCanvas(canvasWidth, canvasHeight);\n            canvas.parent(\"sketch-container\");\n\n            // Set simulation framerate to avoid flickering\n            frameRate(5);\n\n            initCellSize();\n          }\n\n          function draw() {\n            generate();\n            for (let column = 0; column < columnCount; column++) {\n              for (let row = 0; row < rowCount; row++) {\n                // Get cell value (0 or 1)\n                let cell = currentCells[column][row];\n\n                // Set fill color based on cell state\n                if (cell) {\n                  fill(\"#").concat(colorPair[0], "\"); // Light blue for alive cells\n                } else {\n                  fill(\"#").concat(colorPair[1], "\"); // White for dead cells\n                                }\n                  strokeWeight(1);\n                  stroke('white');\n                rect(column * cellSize, row * cellSize, cellSize, cellSize);\n                              }\n                            }\n                          }\n\n                // Reset board when mouse is pressed\n                function mousePressed() {\n                  for (let column = 0; column < columnCount; column++) {\n                    for (let row = 0; row < rowCount; row++) {\n                      // Randomly select value of either 0 (dead) or 1 (alive)\n                      currentCells[column][row] = random([0, 1]);\n                    }\n                  }\n                  loop();\n                }\n\n                // Keep canvas and its content responsive across window resizes\n                function windowResized() {\n                  const container = document.getElementById(\"sketch-container\");\n                  resizeCanvas(container.offsetWidth, container.offsetHeight);\n\n                  // Recalculate columns and rows\n                  columnCount = floor(width / cellSize);\n                  rowCount = floor(height / cellSize);\n\n                  // Resize the grid\n                  let tempCurrent = [];\n                  let tempNext = [];\n\n                  for (let column = 0; column < columnCount; column++) {\n                    tempCurrent[column] = [];\n                    tempNext[column] = [];\n                    for (let row = 0; row < rowCount; row++) {\n                      // If within old grid boundaries, keep values, otherwise initialize new\n                      if (column < currentCells.length && row < currentCells[0].length) {\n                        tempCurrent[column][row] = currentCells[column][row];\n                      } else {\n                        tempCurrent[column][row] = random([0, 1]);\n                      }\n                      tempNext[column][row] = 0;\n                    }\n                  }\n\n                  currentCells = tempCurrent;\n                  nextCells = tempNext;\n                }\n\n                // Create a new generation\n                function generate() {\n                  // Loop through every spot in our 2D array and count living neighbors\n                  for (let column = 0; column < columnCount; column++) {\n                    for (let row = 0; row < rowCount; row++) {\n                      // Column left of current cell\n                      // if column is at left edge, use modulus to wrap to right edge\n                      let left = (column - 1 + columnCount) % columnCount;\n\n                      // Column right of current cell\n                      // if column is at right edge, use modulus to wrap to left edge\n                      let right = (column + 1) % columnCount;\n\n                      // Row above current cell\n                      // if row is at top edge, use modulus to wrap to bottom edge\n                      let above = (row - 1 + rowCount) % rowCount;\n\n                      // Row below current cell\n                      // if row is at bottom edge, use modulus to wrap to top edge\n                      let below = (row + 1) % rowCount;\n\n                      // Count living neighbors surrounding current cell\n                      let neighbours =\n                        currentCells[left][above] +\n                        currentCells[column][above] +\n                        currentCells[right][above] +\n                        currentCells[left][row] +\n                        currentCells[right][row] +\n                        currentCells[left][below] +\n                        currentCells[column][below] +\n                        currentCells[right][below];\n\n                      // Rules of Life\n                      // 1. Any live cell with fewer than two live neighbours dies\n                      // 2. Any live cell with more than three live neighbours dies\n                      if (neighbours < 2 || neighbours > 3) {\n                        nextCells[column][row] = 0;\n                        // 3. Any dead cell with exactly three live neighbours will come to life\n                      } else if (neighbours === 3) {\n                        nextCells[column][row] = 1;\n                        // 4. Any live cell with two or three live neighbours lives unchanged\n                      } else {\n                        nextCells[column][row] = currentCells[column][row];\n                      }\n                    }\n                  }\n\n                  // Swap the current and next arrays for next generation\n                  let temp = currentCells;\n                  currentCells = nextCells;\n                  nextCells = temp;\n                }\n\n                function initCellSize() {\n                  // Calculate columns and rows\n                  columnCount = floor(width / cellSize);\n                  rowCount = floor(height / cellSize);\n\n                  // Initialize the grid\n                  for (let column = 0; column < columnCount; column++) {\n                    currentCells[column] = [];\n                    nextCells[column] = [];\n                    // Initialize each cell with random state (0 or 1)\n                    for (let row = 0; row < rowCount; row++) {\n                      currentCells[column][row] = random([0, 1]);\n                      nextCells[column][row] = 0;\n                    }\n                  }\n                }\n                        </script >\n                      </body >\n                    </html >\n                  "); };
    // 이벤트 리스너 추가 (로그와 에러 수신)
    var _b = (0, react_1.useState)([]), logs = _b[0], setLogs = _b[1];
    (0, react_1.useEffect)(function () {
        var handleMessage = function (event) {
            try {
                var data_1 = JSON.parse(event.data);
                if (data_1.type === 'log') {
                    setLogs(function (prevLogs) { return __spreadArray(__spreadArray([], prevLogs, true), data_1.data, true); });
                }
                else if (data_1.type === 'error') {
                    console.error('Sketch error:', data_1.data);
                    // 에러 UI 표시 로직 추가
                }
            }
            catch (e) {
                // JSON 파싱 에러 처리
            }
        };
        window.addEventListener('message', handleMessage);
        return function () { return window.removeEventListener('message', handleMessage); };
    }, []);
    if (!running) {
        return (<div className="w-full min-h-[500px] bg-gray-100 rounded text-sm text-gray-400 flex justify-center items-center">
        No sketches running
      </div>);
    }
    return (<div className="w-full h-screen">
      <iframe title="p5-sandbox" width="100%" height="100%" srcDoc={srcdoc(result)} sandbox="allow-scripts" allow="accelerometer; camera; microphone; gamepad"/>
    </div>);
};
exports.default = SandBox;
